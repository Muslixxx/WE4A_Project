{% extends 'base.html.twig' %}

{% block title %}Menu Principal Admin{% endblock %}

{% block body %}
    <style>
        .wide-card {
            width: 100%;
            max-width: 1400px;
            margin-left: auto;
            margin-right: auto;
        }

        .bg-blue-darker {
            background-color: #001f3f !important;
            border-radius: 10px;
        }

        .list-group-item {
            background-color: rgba(255,255,255,0.15);
            border: none;
            margin-bottom: 0.5rem;
            color: #fff;
        }
        .tab-menu {
            width: 100%;
            max-width: 600px;
            background-color: #001f3f;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            padding: 0.5rem;
            gap: 1rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
            margin-bottom: 2rem;
        }

        .tab-link {
            background-color: transparent;
            border: 2px solid #ffffff33;
            color: #ffffffcc;
            font-weight: bold;
            font-size: 1rem;
            padding: 0.5rem 1.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .tab-link:hover {
            background-color: #ffffff22;
            color: #ffffff;
        }

        .tab-link.active {
            background-color: #ffffff;
            color: #001f3f;
            border-color: #ffffff;
        }

        .tab-link i {
            font-size: 1.2rem;
        }
    </style>


    <div class="container-fluid d-flex flex-column align-items-center" style="min-height: 100vh; gap: 1rem; padding: 2rem; max-width: 1400px; margin: 0 auto;">

        <div class="tab-menu">
            <a href="#" id="users-tab" class="tab-link active">
                <i class="bi bi-people-fill"></i> Utilisateurs
            </a>
            <a href="#" id="courses-tab" class="tab-link">
                <i class="bi bi-journal-bookmark-fill"></i> UEs
            </a>
        </div>


        <section id="usersSection" class="card wide-card bg-blue-darker p-4 mb-5">
            <div class="card-header d-flex justify-content-between align-items-center bg-transparent border-0">
                <h2 class="text-white" style="font-family: 'Luckiest Guy', cursive;">Liste des Utilisateurs</h2>
                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createUserModal">‚ûï Cr√©er</button>
            </div>
            <div class="card-body">
                <ul class="list-group" id="userList">
                    {% for user in users %}
                        <li class="list-group-item d-flex justify-content-between align-items-center" id="user-{{ user.id }}">
                            <span><strong>{{ user.firstName }} {{ user.lastName }}</strong> ‚Äì {{ user.email }} ({{ user.role }})</span>
                            <div class="d-flex gap-2">
                                <button class="btn btn-danger btn-sm delete-user" data-id="{{ user.id }}">Supprimer</button>
                                <button class="btn btn-warning btn-sm edit-user"
                                        data-id="{{ user.id }}"
                                        data-email="{{ user.email }}"
                                        data-first-name="{{ user.firstName }}"
                                        data-last-name="{{ user.lastName }}"
                                        data-phone-number="{{ user.phoneNumber }}"
                                        data-birth-date="{{ user.birthDate ? user.birthDate|date('Y-m-d') : '' }}"
                                        data-role="{{ user.role }}">
                                    Modifier
                                </button>
                            </div>
                        </li>
                    {% else %}
                        <li class="list-group-item">Aucun utilisateur trouv√©.</li>
                    {% endfor %}
                </ul>
            </div>
        </section>

        <!-- Liste des UEs -->
        <section id="coursesSection" class="card wide-card bg-blue-darker p-4 mb-5" style="display: none;">
            <div class="card-header d-flex justify-content-between align-items-center bg-transparent border-0">
                <h2 class="text-white" style="font-family: 'Luckiest Guy', cursive;">Liste des UE</h2>
                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createCourseModal">
                    ‚ûï Cr√©er une UE
                </button>
            </div>
            <div class="card-body">
                <ul class="list-group" id="courseList">
                    {% for course in courses %}
                        <li class="list-group-item d-flex justify-content-between align-items-center" id="course-{{ course.id }}">
                            <span><strong>{{ course.name }}</strong> : {{ course.description }}</span>
                            <div class="d-flex gap-2">
                                <button class="btn btn-danger btn-sm delete-course" data-id="{{ course.id }}">Supprimer</button>
                                <button class="btn btn-warning btn-sm edit-course"
                                        data-id="{{ course.id }}"
                                        data-name="{{ course.name }}"
                                        data-description="{{ course.description }}">
                                    Modifier
                                </button>
                            </div>
                        </li>
                    {% else %}
                        <li class="list-group-item">Aucune UE trouv√©e.</li>
                    {% endfor %}
                </ul>
            </div>
        </section>



        <!-- Section Activit√©s r√©centes -->

        <div class="card wide-card bg-blue-darker">
            <div class="card-header text-center" style="background: transparent; border-bottom: none;">
                <h2 style="font-family: 'Luckiest Guy', cursive; color: #fff;">Activit√©s r√©centes</h2>
            </div>
            <div class="card-body">
                <div class="list-group" id="recentPosts">
                    {% if recentPosts|length > 0 %}
                        {% for post in recentPosts|slice(0, 3) %}
                            <div class="list-group-item" style="background-color: rgba(255,255,255,0.15); border: none; margin-bottom: 0.5rem; color: #fff;">
                                <small class="text-muted">{{ post.dateCreation|date('d/m/Y H:i') }}</small>
                                <p class="mb-0">
                                    {{ post.user.firstName }} {{ post.user.lastName }} a post√©
                                    {% if post.type == 'document' %}
                                        un fichier
                                    {% elseif post.type == 'link' %}
                                        un lien
                                    {% else %}
                                        un message
                                    {% endif %}
                                    ¬´ {{ post.title }} ¬ª dans {{ post.course.name }}
                                    {% if post.pinned %}
                                        üìå
                                    {% endif %}
                                </p>
                            </div>
                        {% endfor %}
                    {% else %}
                        <p style="color: #fff;">Aucune activit√© r√©cente.</p>
                    {% endif %}
                </div>

                <div class="text-center mt-3">
                    <button id="loadMoreBtn" class="btn btn-outline-light">Charger plus d'actualit√©s</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Modifier User -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Modifier l'utilisateur et assigner des √©l√®ves √† une UE</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <input type="hidden" id="editUserId">

                        {% for field in ['Email', 'FirstName', 'LastName', 'PhoneNumber', 'BirthDate', 'Role'] %}
                            <div class="mb-3">
                                <label>{{ field|capitalize }} actuel : <span id="current{{ field }}"></span></label>

                                {% if field == 'Role' %}
                                    <select class="form-select" id="edit{{ field }}" disabled>
                                        <option value="ROLE_ELEVE">√âl√®ve</option>
                                        <option value="ROLE_PROF">Professeur</option>
                                        <option value="ROLE_ADMIN">Administrateur</option>
                                        <option value="ROLE_PROF_ADMIN">Prof et Administrateur</option>
                                    </select>
                                {% elseif field == 'BirthDate' %}
                                    <input type="date" class="form-control" id="edit{{ field }}" readonly>
                                {% else %}
                                    <input type="text" class="form-control" id="edit{{ field }}" readonly>
                                {% endif %}

                                <div class="mt-1">
                                    <button type="button" class="btn btn-sm btn-primary" onclick="enableEdit('edit{{ field }}')">Modifier</button>
                                    <button type="button" class="btn btn-sm btn-success d-none" id="validate-{{ field }}" onclick="validateEdit('edit{{ field }}')">Valider</button>
                                </div>
                            </div>
                        {% endfor %}

                        <!-- Nouveau mot de passe -->
                        <div class="mb-3">
                            <label>Nouveau mot de passe (laisser vide si pas de changement)</label>
                            <input type="password" class="form-control" id="editPassword">
                        </div>

                        <!-- Liste des √©l√®ves √† assigner -->
                        <div class="mb-3">
                            <label>Assigner des √©l√®ves √† une UE :</label>
                            <div class="border p-2" style="max-height: 200px; overflow-y: auto;">
                                {% for student in students %}
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="eleve{{ student.id }}" name="assignedStudents" value="{{ student.id }}">
                                        <label class="form-check-label" for="student{{ student.id }}">
                                            {{ student.firstName }} {{ student.lastName }} ({{ student.email }})
                                        </label>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="saveUserChanges">Sauvegarder les changements</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Cr√©er Utilisateur -->
    <div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createUserModalLabel">Cr√©er un nouvel utilisateur</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="createUserForm">
                        <div class="mb-3">
                            <label>Email</label>
                            <input type="email" class="form-control" id="newEmail" required>
                        </div>
                        <div class="mb-3">
                            <label>Mot de passe</label>
                            <input type="password" class="form-control" id="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label>Pr√©nom</label>
                            <input type="text" class="form-control" id="newFirstName" required>
                        </div>
                        <div class="mb-3">
                            <label>Nom</label>
                            <input type="text" class="form-control" id="newLastName" required>
                        </div>
                        <div class="mb-3">
                            <label>T√©l√©phone</label>
                            <input type="text" class="form-control" id="newPhoneNumber" required>
                        </div>
                        <div class="mb-3">
                            <label>Date de naissance</label>
                            <input type="date" class="form-control" id="newBirthDate" required>
                        </div>
                        <div class="mb-3">
                            <label>R√¥le</label>
                            <select class="form-select" id="newRole" required>
                                <option value="ROLE_ELEVE">√âl√®ve</option>
                                <option value="ROLE_PROF">Professeur</option>
                                <option value="ROLE_ADMIN">Administrateur</option>
                                <option value="ROLE_PROF_ADMIN">Professeur + Administrateur</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="createUserButton" class="btn btn-success">Cr√©er l'utilisateur</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal Cr√©er une UE -->
    <div class="modal fade" id="createCourseModal" tabindex="-1" aria-labelledby="createCourseModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createCourseModalLabel">Cr√©er une UE</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="newCourseName" class="form-label">Nom de l'UE</label>
                        <input type="text" class="form-control" id="newCourseName" placeholder="Nom de l'UE">
                    </div>
                    <div class="mb-3">
                        <label for="newCourseDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="newCourseDescription" placeholder="Description de l'UE"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="createCourseButton">Cr√©er l'UE</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Modifier une UE -->
    <div class="modal fade" id="editCourseModal" tabindex="-1" aria-labelledby="editCourseModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCourseModalLabel">Modifier une UE</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editCourseId">

                    <div class="mb-3">
                        <label for="editCourseName" class="form-label">Nom de l'UE</label>
                        <input type="text" class="form-control" id="editCourseName">
                    </div>

                    <div class="mb-3">
                        <label for="editCourseDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editCourseDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="saveCourseChanges">Sauvegarder les changements</button>
                </div>
            </div>
        </div>
    </div>




    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // -------- Gestion des onglets --------
            const usersTab = document.getElementById('users-tab');
            const coursesTab = document.getElementById('courses-tab');
            const usersSection = document.getElementById('usersSection');
            const coursesSection = document.getElementById('coursesSection');

            function switchTab(activeTab, inactiveTab, activeSection, inactiveSection) {
                activeTab.classList.add('active');
                inactiveTab.classList.remove('active');
                activeSection.style.display = 'block';
                inactiveSection.style.display = 'none';
            }

            usersTab.addEventListener('click', (e) => {
                e.preventDefault();
                switchTab(usersTab, coursesTab, usersSection, coursesSection);
            });

            coursesTab.addEventListener('click', (e) => {
                e.preventDefault();
                switchTab(coursesTab, usersTab, coursesSection, usersSection);
            });

            // -------- Gestion des suppressions --------
            document.querySelectorAll('.delete-user').forEach(button => {
                button.addEventListener('click', async () => {
                    const userId = button.getAttribute('data-id');
                    if (confirm('√ätes-vous s√ªr de vouloir supprimer cet utilisateur ?')) {
                        const response = await fetch(`/admin/delete-user/${userId}`, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        const result = await response.json();
                        if (result.status === 'success') {
                            document.getElementById('user-' + userId).remove();
                        } else {
                            alert('Erreur lors de la suppression.');
                        }
                    }
                });
            });

            document.querySelectorAll('.delete-course').forEach(button => {
                button.addEventListener('click', async () => {
                    const courseId = button.getAttribute('data-id');
                    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette UE ?')) {
                        const response = await fetch(`/admin/delete-course/${courseId}`, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        const result = await response.json();
                        if (result.status === 'success') {
                            document.getElementById('course-' + courseId).remove();
                        } else {
                            alert('Erreur lors de la suppression.');
                        }
                    }
                });
            });

            // -------- Gestion des modales --------
            document.querySelectorAll('.edit-user').forEach(button => {
                button.addEventListener('click', () => {
                    const fields = ['Email', 'FirstName', 'LastName', 'PhoneNumber', 'BirthDate', 'Role'];
                    document.getElementById('editUserId').value = button.getAttribute('data-id');

                    fields.forEach(field => {
                        const lowerField = field.charAt(0).toLowerCase() + field.slice(1);
                        document.getElementById('current' + field).textContent = button.getAttribute('data-' + lowerField);
                        document.getElementById('edit' + field).value = button.getAttribute('data-' + lowerField);
                    });

                    new bootstrap.Modal(document.getElementById('editUserModal')).show();
                });
            });

            document.querySelectorAll('.edit-course').forEach(button => {
                button.addEventListener('click', () => {
                    document.getElementById('editCourseId').value = button.getAttribute('data-id');
                    document.getElementById('editCourseName').value = button.getAttribute('data-name');
                    document.getElementById('editCourseDescription').value = button.getAttribute('data-description');

                    new bootstrap.Modal(document.getElementById('editCourseModal')).show();
                });
            });

            // -------- Gestion cr√©ation utilisateurs / UEs --------
            const createUserBtn = document.getElementById('createUserButton');
            if (createUserBtn) {
                createUserBtn.addEventListener('click', async () => {
                    const userData = {
                        email: document.getElementById('newEmail').value,
                        password: document.getElementById('newPassword').value,
                        firstName: document.getElementById('newFirstName').value,
                        lastName: document.getElementById('newLastName').value,
                        phoneNumber: document.getElementById('newPhoneNumber').value,
                        birthDate: document.getElementById('newBirthDate').value,
                        role: document.getElementById('newRole').value
                    };

                    if (Object.values(userData).some(v => !v)) {
                        alert('Merci de remplir tous les champs.');
                        return;
                    }

                    try {
                        const response = await fetch('/admin/create-user', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify(userData)
                        });

                        const result = await response.json();
                        if (result.status === 'success') {
                            alert('Utilisateur cr√©√© avec succ√®s !');
                            window.location.reload();
                        } else {
                            alert('Erreur : ' + result.message);
                        }
                    } catch (error) {
                        alert('Erreur de communication avec le serveur.');
                    }
                });
            }

            document.getElementById('createCourseButton').addEventListener('click', async () => {
                const name = document.getElementById('newCourseName').value;
                const description = document.getElementById('newCourseDescription').value;

                if (!name || !description) {
                    alert('Merci de remplir tous les champs.');
                    return;
                }

                try {
                    const response = await fetch('/admin/create-course', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ name, description })
                    });

                    const result = await response.json();
                    if (result.status === 'success') {
                        alert('UE cr√©√©e avec succ√®s !');
                        window.location.reload();
                    } else {
                        alert('Erreur : ' + result.message);
                    }
                } catch (error) {
                    alert('Erreur de communication avec le serveur.');
                }
            });

            // -------- Gestion sauvegarde modifications utilisateur / UE --------
            document.getElementById('saveUserChanges').addEventListener('click', async () => {
                const userId = document.getElementById('editUserId').value;

                const userData = {
                    email: document.getElementById('editEmail').value,
                    password: document.getElementById('editPassword').value,
                    firstName: document.getElementById('editFirstName').value,
                    lastName: document.getElementById('editLastName').value,
                    phoneNumber: document.getElementById('editPhoneNumber').value,
                    birthDate: document.getElementById('editBirthDate').value,
                    role: document.getElementById('editRole').value
                };

                try {
                    const response = await fetch(`/admin/update-user/${userId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(userData)
                    });

                    const result = await response.json();
                    if (result.status === 'success') {
                        alert('Utilisateur mis √† jour avec succ√®s.');
                        window.location.reload();
                    } else {
                        alert('Erreur : ' + result.message);
                    }
                } catch (error) {
                    alert('Erreur de communication avec le serveur.');
                }
            });

            document.getElementById('saveCourseChanges').addEventListener('click', async () => {
                const courseId = document.getElementById('editCourseId').value;
                const name = document.getElementById('editCourseName').value;
                const description = document.getElementById('editCourseDescription').value;

                if (!name || !description) {
                    alert('Merci de remplir tous les champs.');
                    return;
                }

                try {
                    const response = await fetch(`/admin/update-course/${courseId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ name, description })
                    });

                    const result = await response.json();
                    if (result.status === 'success') {
                        alert('UE modifi√©e avec succ√®s !');
                        window.location.reload();
                    } else {
                        alert('Erreur : ' + result.message);
                    }
                } catch (error) {
                    alert('Erreur de communication avec le serveur.');
                }
            });

            // -------- Load more posts --------
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', async () => {
                    try {
                        const response = await fetch('{{ path('admin_load_more_posts') }}', {
                            method: 'GET',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });

                        const posts = await response.json();
                        const container = document.getElementById('recentPosts');

                        container.innerHTML = '';

                        posts.forEach(post => {
                            const div = document.createElement('div');
                            div.className = 'list-group-item';
                            div.style.backgroundColor = 'rgba(255,255,255,0.15)';
                            div.style.border = 'none';
                            div.style.marginBottom = '0.5rem';
                            div.style.color = '#fff';

                            div.innerHTML = `
                        <small class="text-muted">${post.date}</small>
                        <p class="mb-0">
                            ${post.firstName} ${post.lastName} a post√©
                            ${post.type === 'document' ? 'un fichier' : post.type === 'link' ? 'un lien' : 'un message'}
                            ¬´ ${post.title} ¬ª dans ${post.courseName}
                            ${post.pinned ? 'üìå' : ''}
                        </p>
                    `;

                            container.appendChild(div);
                        });

                        loadMoreBtn.style.display = 'none';
                    } catch (error) {
                        console.error('Erreur AJAX :', error);
                        alert('Erreur de chargement.');
                    }
                });
            }
        });
    </script>




{% endblock %}
