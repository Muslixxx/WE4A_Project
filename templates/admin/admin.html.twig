{% extends 'base.html.twig' %}

{% block title %}Menu Principal Admin{% endblock %}

{% block body %}
    <style>
        /* Styles communs pour les cartes */
        .card {
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin-bottom: 1rem;
        }
        .bg-blue-darker {
            background-color: #001f3f !important;
        }
        .list-group-item {
            background-color: rgba(255,255,255,0.15);
            border: none;
            margin-bottom: 0.5rem;
            color: #fff;
        }
        .list-group-item span {
            /* Pour que le texte reste lisible */
            color: #fff;
        }
    </style>

    <div class="container d-flex flex-column align-items-center" style="min-height: 100vh; gap: 1rem; padding: 2rem;">

        <!-- S√©lecteur pour changer de section -->
        <div class="card w-100 bg-blue-darker mb-4">
            <div class="card-body text-center">
                <h2 style="font-family: 'Luckiest Guy', cursive; color: #fff;">Catalogue</h2>
                <select id="catalogSelector" class="form-select w-50 mx-auto mt-3">
                    <option value="users" selected>Utilisateurs</option>
                    <option value="courses">UEs</option>
                </select>
            </div>
        </div>


        <!-- Liste des utilisateurs -->
        <div id="usersSection">
            <!-- Section Liste des Utilisateurs -->
            <div class="card w-100 bg-blue-darker">
                <div class="card-header d-flex justify-content-between align-items-center" style="background: transparent; border-bottom: none;">
                    <h2 style="font-family: 'Luckiest Guy', cursive; color: #fff;">Liste des Utilisateurs</h2>
                    <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createUserModal">
                        Cr√©er un utilisateur ‚ûï
                    </button>
                </div>
                <div class="card-body">
                    <ul class="list-group" id="userList">
                        {% for user in users %}
                            <li class="list-group-item d-flex justify-content-between align-items-center" id="user-{{ user.id }}">
                                <span><strong>{{ user.firstName }} {{ user.lastName }}</strong> - {{ user.email }} ({{ user.role }})</span>
                                <div class="action-buttons">
                                    <button class="btn btn-danger btn-sm delete-user" data-id="{{ user.id }}">Supprimer</button>
                                    <button class="btn btn-danger btn-sm edit-user" data-id="{{ user.id }}"
                                            data-email="{{ user.email }}" data-first-name="{{ user.firstName }}"
                                            data-last-name="{{ user.lastName }}" data-phone-number="{{ user.phoneNumber }}"
                                            data-birth-date="{{ user.birthDate ? user.birthDate|date('Y-m-d') : '' }}"
                                            data-role="{{ user.role }}">
                                        Modifier
                                    </button>
                                </div>
                            </li>
                        {% else %}
                            <li class="list-group-item">Aucun utilisateur trouv√©.</li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>

        <!-- Liste des UEs -->
        <div id="coursesSection" style="display: none;">
            <!-- Section Liste des UE -->
            <div class="card w-100 bg-blue-darker">
                <div class="card-header d-flex justify-content-between align-items-center" style="background: transparent; border-bottom: none;">
                    <h2 style="font-family: 'Luckiest Guy', cursive; color: #fff;">Liste des UE</h2>
                    <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createCourseModal">
                        Cr√©er une UE ‚ûï
                    </button>
                </div>
                <div class="card-body">
                    <ul class="list-group" id="courseList">
                        {% for course in courses %}
                            <li class="list-group-item d-flex justify-content-between align-items-center" id="course-{{ course.id }}">
                                <span><strong>{{ course.name }}</strong>: {{ course.description }}</span>
                                <div class="action-buttons">
                                    <button class="btn btn-danger btn-sm delete-course" data-id="{{ course.id }}">Supprimer</button>
                                    <button
                                            class="btn btn-danger btn-sm edit-course"
                                            data-id="{{ course.id }}"
                                            data-name="{{ course.name }}"
                                            data-description="{{ course.description }}"
                                    >
                                        Modifier
                                    </button>
                                </div>
                            </li>
                        {% else %}
                            <li class="list-group-item">Aucune UE trouv√©e.</li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>


        <!-- Section Activit√©s r√©centes -->

        <div class="card w-100 bg-blue-darker">
            <div class="card-header text-center" style="background: transparent; border-bottom: none;">
                <h2 style="font-family: 'Luckiest Guy', cursive; color: #fff;">Activit√©s r√©centes</h2>
            </div>
            <div class="card-body">
                <div class="list-group" id="recentPosts">
                    {% if recentPosts|length > 0 %}
                        {% for post in recentPosts|slice(0, 3) %}
                            <div class="list-group-item" style="background-color: rgba(255,255,255,0.15); border: none; margin-bottom: 0.5rem; color: #fff;">
                                <small class="text-muted">{{ post.dateCreation|date('d/m/Y H:i') }}</small>
                                <p class="mb-0">
                                    {{ post.user.firstName }} {{ post.user.lastName }} a post√©
                                    {% if post.type == 'document' %}
                                        un fichier
                                    {% elseif post.type == 'link' %}
                                        un lien
                                    {% else %}
                                        un message
                                    {% endif %}
                                    ¬´ {{ post.title }} ¬ª dans {{ post.course.name }}
                                    {% if post.pinned %}
                                        üìå
                                    {% endif %}
                                </p>
                            </div>
                        {% endfor %}
                    {% else %}
                        <p style="color: #fff;">Aucune activit√© r√©cente.</p>
                    {% endif %}
                </div>

                <div class="text-center mt-3">
                    <button id="loadMoreBtn" class="btn btn-outline-light">Charger plus d'actualit√©s</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Modifier User -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Modifier l'utilisateur</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <input type="hidden" id="editUserId">

                        {% for field in ['Email', 'FirstName', 'LastName', 'PhoneNumber', 'BirthDate', 'Role'] %}
                            <div class="mb-3">
                                <label>{{ field|capitalize }} actuel : <span id="current{{ field }}"></span></label>

                                {% if field == 'Role' %}
                                    <select class="form-select" id="edit{{ field }}" disabled>
                                        <option value="ROLE_ELEVE">√âl√®ve</option>
                                        <option value="ROLE_PROF">Professeur</option>
                                        <option value="ROLE_ADMIN">Administrateur</option>
                                        <option value="ROLE_PROF_ADMIN">Prof et Administrateur</option>
                                    </select>
                                {% elseif field == 'BirthDate' %}
                                    <input type="date" class="form-control" id="edit{{ field }}" readonly>
                                {% else %}
                                    <input type="text" class="form-control" id="edit{{ field }}" readonly>
                                {% endif %}

                                <div class="mt-1">
                                    <button type="button" class="btn btn-sm btn-primary" onclick="enableEdit('edit{{ field }}')">Modifier</button>
                                    <button type="button" class="btn btn-sm btn-success d-none" id="validate-{{ field }}" onclick="validateEdit('edit{{ field }}')">Valider</button>
                                </div>
                            </div>
                        {% endfor %}

                        <!-- Mot de passe sp√©cial -->
                        <div class="mb-3">
                            <label>Nouveau mot de passe (laisser vide si pas de changement)</label>
                            <input type="password" class="form-control" id="editPassword">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="saveUserChanges">Sauvegarder les changements</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Cr√©er Utilisateur -->
    <div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createUserModalLabel">Cr√©er un nouvel utilisateur</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="createUserForm">
                        <div class="mb-3">
                            <label>Email</label>
                            <input type="email" class="form-control" id="newEmail" required>
                        </div>
                        <div class="mb-3">
                            <label>Mot de passe</label>
                            <input type="password" class="form-control" id="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label>Pr√©nom</label>
                            <input type="text" class="form-control" id="newFirstName" required>
                        </div>
                        <div class="mb-3">
                            <label>Nom</label>
                            <input type="text" class="form-control" id="newLastName" required>
                        </div>
                        <div class="mb-3">
                            <label>T√©l√©phone</label>
                            <input type="text" class="form-control" id="newPhoneNumber" required>
                        </div>
                        <div class="mb-3">
                            <label>Date de naissance</label>
                            <input type="date" class="form-control" id="newBirthDate" required>
                        </div>
                        <div class="mb-3">
                            <label>R√¥le</label>
                            <select class="form-select" id="newRole" required>
                                <option value="ROLE_ELEVE">√âl√®ve</option>
                                <option value="ROLE_PROF">Professeur</option>
                                <option value="ROLE_ADMIN">Administrateur</option>
                                <option value="ROLE_PROF_ADMIN">Professeur + Administrateur</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="createUserButton" class="btn btn-success">Cr√©er l'utilisateur</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal Cr√©er une UE -->
    <div class="modal fade" id="createCourseModal" tabindex="-1" aria-labelledby="createCourseModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createCourseModalLabel">Cr√©er une UE</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="newCourseName" class="form-label">Nom de l'UE</label>
                        <input type="text" class="form-control" id="newCourseName" placeholder="Nom de l'UE">
                    </div>
                    <div class="mb-3">
                        <label for="newCourseDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="newCourseDescription" placeholder="Description de l'UE"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="createCourseButton">Cr√©er l'UE</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Modifier une UE -->
    <div class="modal fade" id="editCourseModal" tabindex="-1" aria-labelledby="editCourseModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #f0f0f0;">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCourseModalLabel">Modifier une UE</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editCourseId">

                    <div class="mb-3">
                        <label for="editCourseName" class="form-label">Nom de l'UE</label>
                        <input type="text" class="form-control" id="editCourseName">
                    </div>

                    <div class="mb-3">
                        <label for="editCourseDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editCourseDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="saveCourseChanges">Sauvegarder les changements</button>
                </div>
            </div>
        </div>
    </div>




    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const usersSection = document.getElementById('usersSection');
            const coursesSection = document.getElementById('coursesSection');
            const selector = document.getElementById('catalogSelector');

            // Changer d'onglet entre utilisateurs et cours
            selector.addEventListener('change', () => {
                if (selector.value === 'users') {
                    usersSection.style.display = 'block';
                    coursesSection.style.display = 'none';
                } else {
                    usersSection.style.display = 'none';
                    coursesSection.style.display = 'block';
                }
            });

            // Suppression d'un utilisateur
            document.querySelectorAll('.delete-user').forEach(button => {
                button.addEventListener('click', async () => {
                    const userId = button.getAttribute('data-id');
                    if (confirm('√ätes-vous s√ªr de vouloir supprimer cet utilisateur ?')) {
                        const response = await fetch(`/admin/delete-user/${userId}`, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        const result = await response.json();
                        if (result.status === 'success') {
                            document.getElementById('user-' + userId).remove();
                        } else {
                            alert('Erreur lors de la suppression.');
                        }
                    }
                });
            });

            // Suppression d'un cours
            document.querySelectorAll('.delete-course').forEach(button => {
                button.addEventListener('click', async () => {
                    const courseId = button.getAttribute('data-id');
                    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette UE ?')) {
                        const response = await fetch(`/admin/delete-course/${courseId}`, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        const result = await response.json();
                        if (result.status === 'success') {
                            document.getElementById('course-' + courseId).remove();
                        } else {
                            alert('Erreur lors de la suppression.');
                        }
                    }
                });
            });

            // Ouvrir la fen√™tre de modification d'utilisateur
            document.querySelectorAll('.edit-user').forEach(button => {
                button.addEventListener('click', () => {
                    const userId = button.getAttribute('data-id');
                    const email = button.getAttribute('data-email');
                    const firstName = button.getAttribute('data-first-name');
                    const lastName = button.getAttribute('data-last-name');
                    const phoneNumber = button.getAttribute('data-phone-number');
                    const birthDate = button.getAttribute('data-birth-date');
                    const role = button.getAttribute('data-role');

                    document.getElementById('editUserId').value = userId;
                    document.getElementById('currentEmail').textContent = email;
                    document.getElementById('editEmail').value = email;
                    document.getElementById('currentFirstName').textContent = firstName;
                    document.getElementById('editFirstName').value = firstName;
                    document.getElementById('currentLastName').textContent = lastName;
                    document.getElementById('editLastName').value = lastName;
                    document.getElementById('currentPhoneNumber').textContent = phoneNumber;
                    document.getElementById('editPhoneNumber').value = phoneNumber;
                    document.getElementById('currentBirthDate').textContent = birthDate;
                    document.getElementById('editBirthDate').value = birthDate;
                    document.getElementById('currentRole').textContent = role;
                    document.getElementById('editRole').value = role;

                    new bootstrap.Modal(document.getElementById('editUserModal')).show();
                });
            });

            // Cr√©ation d'une UE
            document.getElementById('createCourseButton').addEventListener('click', async function () {
                const name = document.getElementById('newCourseName').value;
                const description = document.getElementById('newCourseDescription').value;

                if (!name || !description) {
                    alert('Merci de remplir tous les champs.');
                    return;
                }

                try {
                    const response = await fetch('/admin/create-course', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ name, description })
                    });

                    const result = await response.json();

                    if (result.status === 'success') {
                        alert('UE cr√©√©e avec succ√®s !');
                        window.location.reload(); // recharge pour afficher la nouvelle UE
                    } else {
                        alert('Erreur : ' + result.message);
                    }
                } catch (error) {
                    alert('Erreur de communication avec le serveur.');
                }
            });


            // Sauvegarder les changements sur un utilisateur
            document.getElementById('saveUserChanges').addEventListener('click', async () => {
                const userId = document.getElementById('editUserId').value;

                const userData = {
                    email: document.getElementById('editEmail').value,
                    password: document.getElementById('editPassword').value,
                    firstName: document.getElementById('editFirstName').value,
                    lastName: document.getElementById('editLastName').value,
                    phoneNumber: document.getElementById('editPhoneNumber').value,
                    birthDate: document.getElementById('editBirthDate').value,
                    role: document.getElementById('editRole').value
                };

                try {
                    const response = await fetch(`/admin/update-user/${userId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(userData)
                    });

                    const result = await response.json();
                    if (result.status === 'success') {
                        alert('Utilisateur mis √† jour avec succ√®s.');
                        window.location.reload();
                    } else {
                        alert('Erreur : ' + result.message);
                    }
                } catch (error) {
                    console.error('Erreur lors de l\'envoi de la mise √† jour:', error);
                    alert('Erreur de communication avec le serveur.');
                }
            });

            // Remplir les champs de la modale Modifier UE
            document.querySelectorAll('.edit-course').forEach(button => {
                button.addEventListener('click', () => {
                    const courseId = button.getAttribute('data-id');
                    const courseName = button.getAttribute('data-name');
                    const courseDescription = button.getAttribute('data-description');

                    document.getElementById('editCourseId').value = courseId;
                    document.getElementById('editCourseName').value = courseName;
                    document.getElementById('editCourseDescription').value = courseDescription;

                    new bootstrap.Modal(document.getElementById('editCourseModal')).show();
                });
            });

            // Sauvegarder les modifications UE
            document.getElementById('saveCourseChanges').addEventListener('click', async function () {
                const courseId = document.getElementById('editCourseId').value;
                const name = document.getElementById('editCourseName').value;
                const description = document.getElementById('editCourseDescription').value;

                if (!name || !description) {
                    alert('Merci de remplir tous les champs.');
                    return;
                }

                try {
                    const response = await fetch(`/admin/update-course/${courseId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ name, description })
                    });

                    const result = await response.json();

                    if (result.status === 'success') {
                        alert('UE modifi√©e avec succ√®s !');
                        window.location.reload();
                    } else {
                        alert('Erreur : ' + result.message);
                    }
                } catch (error) {
                    alert('Erreur de communication avec le serveur.');
                }
            });

            // Cr√©ation d'un utilisateur
            const createUserBtn = document.getElementById('createUserButton');
            if (createUserBtn) {
                createUserBtn.addEventListener('click', async () => {
                    const email = document.getElementById('newEmail').value;
                    const password = document.getElementById('newPassword').value;
                    const firstName = document.getElementById('newFirstName').value;
                    const lastName = document.getElementById('newLastName').value;
                    const phoneNumber = document.getElementById('newPhoneNumber').value;
                    const birthDate = document.getElementById('newBirthDate').value;
                    const role = document.getElementById('newRole').value;

                    if (!email || !password || !firstName || !lastName || !phoneNumber || !birthDate || !role) {
                        alert('Merci de remplir tous les champs.');
                        return;
                    }

                    try {
                        const response = await fetch('/admin/create-user', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({
                                email, password, firstName, lastName, phoneNumber, birthDate, role
                            })
                        });

                        const result = await response.json();
                        if (result.status === 'success') {
                            alert('Utilisateur cr√©√© avec succ√®s !');
                            window.location.reload();
                        } else {
                            alert('Erreur : ' + result.message);
                        }
                    } catch (error) {
                        alert('Erreur de communication avec le serveur.');
                    }
                });
            }
        });

        // Fonction pour rendre un champ √©ditable
        function enableEdit(id) {
            const input = document.getElementById(id);
            const validateButton = document.getElementById('validate-' + id.replace('edit', ''));

            input.removeAttribute('readonly');
            input.removeAttribute('disabled');
            input.focus();

            if (validateButton) {
                validateButton.classList.remove('d-none');
            }
        }

        // Fonction pour valider la modification d'un champ
        function validateEdit(id) {
            const input = document.getElementById(id);
            const validateButton = document.getElementById('validate-' + id.replace('edit', ''));

            if (input.tagName === "SELECT") {
                input.setAttribute('disabled', true);
            } else {
                input.setAttribute('readonly', true);
            }

            if (validateButton) {
                validateButton.classList.add('d-none');
            }
        }
    </script>

    <script>
        document.getElementById('loadMoreBtn').addEventListener('click', async () => {
            try {
                const response = await fetch('{{ path('admin_load_more_posts') }}', {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const posts = await response.json();
                const container = document.getElementById('recentPosts');

                container.innerHTML = ''; // On vide l'ancien contenu

                posts.forEach(post => {
                    const div = document.createElement('div');
                    div.className = 'list-group-item';
                    div.style.backgroundColor = 'rgba(255,255,255,0.15)';
                    div.style.border = 'none';
                    div.style.marginBottom = '0.5rem';
                    div.style.color = '#fff';

                    div.innerHTML = `
                    <small class="text-muted">${post.date}</small>
                    <p class="mb-0">
                        ${post.firstName} ${post.lastName} a post√©
                        ${post.type === 'document' ? 'un fichier' : post.type === 'link' ? 'un lien' : 'un message'}
                        ¬´ ${post.title} ¬ª dans ${post.courseName}
                        ${post.pinned ? 'üìå' : ''}
                    </p>
                `;

                    container.appendChild(div);
                });

                document.getElementById('loadMoreBtn').style.display = 'none'; // Cacher le bouton apr√®s chargement
            } catch (error) {
                console.error('Erreur AJAX :', error);
                alert('Erreur de chargement.');
            }
        });
    </script>



{% endblock %}
