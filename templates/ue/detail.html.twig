{% extends 'base.html.twig' %}

{% block title %}{{ course.name }}{% endblock %}

{% set courseImages = {
    'Math√©matiques': '/images/courses/math.png',
    'Physique': '/images/courses/physique.png',
    'Chimie': '/images/courses/chimie.png',
    'Informatique': '/images/courses/informatique.png',
    'Ing√©nierie': '/images/courses/ingenierie.png',
    'Anglais': '/images/courses/anglais.png'
} %}

{% block body %}
    <style>
        body {
            background-color: #cceeff; /* bleu ciel l√©ger */
        }
    </style>
    <div class="container mt-5">

        <!-- Titre et Description -->
        <div class="card mb-4" style="background-color: #64b5f6; color: #fff; overflow: hidden; padding: 2rem;">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h1 style="font-size: 2.5rem;">{{ course.name }}</h1>
                    <p style="font-size: 1.2rem;">{{ course.description }}</p>
                </div>
                <div class="col-md-6 d-flex justify-content-center">
                    {% if courseImages[course.name] is defined %}
                        <img src="{{ courseImages[course.name] }}" alt="{{ course.name }}" style="width: 100%; max-width: 300px; height: auto; border-radius: 10px;">
                    {% endif %}
                </div>
            </div>
        </div>

        <!-- Contenu de l'UE -->
        <div class="card mb-4" style="background-color: #64b5f6; color: #fff;">
            <div class="card-header d-flex justify-content-between align-items-center" style="background: transparent; border-bottom: none;">
                <h2 style="margin: 0;">Contenu de l'UE</h2>
                {% if app.user.role in ['ROLE_PROF', 'ROLE_PROF_ADMIN'] %}
                    <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#createContentModal">
                        ‚ûï Ajouter du contenu
                    </button>
                {% endif %}
            </div>

            <div class="card-body">
                {% if course.contents|length > 0 %}
                    <ul class="list-group list-group-flush">
                        {% for content in course.contents %}
                            <li class="list-group-item" style="background: transparent; color: white; border: none;">
                                    <div>
                                        <strong>{{ content.name }}</strong>
                                        <span class="badge bg-info text-dark ms-2">{{ content.type }}</span>


                                {% if content.media is not empty %}
                                    {% set media = content.media|lower %}
                                    {% if media ends with '.jpg' or media ends with '.jpeg' or media ends with '.png' or media ends with '.gif' %}
                                        <img src="{{ content.media }}" alt="Image de contenu" style="max-width: 300px; height: auto; border-radius: 8px;">
                                    {% else %}
                                        <a href="{{ content.media }}" target="_blank" class="btn btn-sm btn-outline-light">üîó Voir le lien</a>
                                    {% endif %}
                                {% endif %}
                                        {% if app.user.role in ['ROLE_PROF', 'ROLE_PROF_ADMIN'] %}
                                            <form method="post" action="{{ path('course_delete_content', {'id': content.id}) }}" style="display: inline;" onsubmit="return confirm('Supprimer cette ressource ?');">
                                                <input type="hidden" name="_method" value="DELETE">
                                                <button type="submit" class="btn btn-sm btn-danger">üóëÔ∏è</button>
                                            </form>
                                        {% endif %}
                                    </div>
                            </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p class="text-center mt-3">Aucun contenu disponible.</p>
                {% endif %}
            </div>
        </div>



        <!-- Modal Cr√©er un contenu -->
        <div class="modal fade" id="createContentModal" tabindex="-1" aria-labelledby="createContentModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content" style="background-color: #f0f0f0;">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createContentModalLabel">Ajouter un Contenu</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                    </div>
                    <div class="modal-body">
                        <form id="contentForm" enctype="multipart/form-data" method="post">
                            <div class="mb-3">
                                <label for="contentName" class="form-label">Nom du contenu</label>
                                <input type="text" class="form-control" id="contentName" required>
                            </div>

                            <div class="mb-3">
                                <label for="contentTypeSelect" class="form-label">Type</label>
                                <select class="form-select" id="contentTypeSelect" required>
                                    <option value="ressource">Ressource</option>
                                    <option value="document">Document</option>
                                </select>
                            </div>

                            <!-- Champ pour lien (ressource) -->
                            <div class="mb-3" id="contentLinkGroup">
                                <label for="contentMedia" class="form-label">Lien vers une ressource</label>
                                <input type="url" class="form-control" id="contentMedia" placeholder="https://exemple.com">
                            </div>

                            <!-- Champ pour fichier (document) -->
                            <div class="mb-3 d-none" id="contentFileGroup">
                                <label for="contentFile" class="form-label">T√©l√©verser un document</label>
                                <input type="file" class="form-control" id="contentFile" name="file">
                            </div>
                        </form>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="button" class="btn btn-primary" id="submitContent">Ajouter</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- Section Posts -->
        <div class="card mb-4" style="background-color: #64b5f6; color: #ffffff; border-radius: 15px;">
            <div class="card-header d-flex justify-content-between align-items-center" style="background: transparent; border-bottom: none;">
                <h2 style="font-family: 'Luckiest Guy', cursive; color: #ff6f61;">Posts</h2>
                {% if app.user.role in ['ROLE_PROF', 'ROLE_PROF_ADMIN'] %}
                    <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#createPostModal">
                        ‚ûï Cr√©er un post
                    </button>
                {% endif %}
            </div>

            <div class="card-body">
                {% if course.posts|length > 0 %}
                    <div class="table-responsive">
                        <table class="table table-borderless" style="background-color: #39acff; border-radius: 15px; overflow: hidden;">
                            <thead style="background-color: #ffffff;">
                            <tr class="text-center">
                                <th style="padding: 1rem;">Auteur</th>
                                <th style="padding: 1rem;">Titre</th>
                                <th style="padding: 1rem;">Description</th>
                                {% if app.user.role in ['ROLE_PROF', 'ROLE_PROF_ADMIN'] %}
                                    <th style="padding: 1rem;">Actions</th>
                                {% endif %}
                            </tr>
                            </thead>
                            <tbody>
                            {% for post in course.posts %}
                                <tr class="text-center" style="border-top: 2px solid #64b5f6;">
                                    <td style="padding: 1rem;">{{ post.user.firstName }} {{ post.user.lastName }}</td>
                                    <td style="padding: 1rem;">{{ post.title }}</td>
                                    <td style="padding: 1rem;">{{ post.description }}</td>

                                    {% if app.user.role in ['ROLE_PROF', 'ROLE_PROF_ADMIN'] %}
                                        <td style="padding: 1rem;">
                                            <!-- Bouton √âpingler/D√©s√©pingler -->
                                            <button
                                                    class="btn btn-sm toggle-important mb-2 {{ post.isImportant ? 'btn-danger' : 'btn-success' }}"
                                                    data-post-id="{{ post.id }}"
                                                    data-toggle-url="{{ path('course_toggle_important', {'id': post.id}) }}"
                                            >
                                                {{ post.isImportant ? 'd√©sepingler' : '√©pingler' }}
                                            </button>


                                            <!-- Bouton Supprimer (visible uniquement pour l'auteur) -->
                                            {% if post.user.id == app.user.id %}
                                                <form method="post" action="{{ path('course_delete_post', {'id': post.id}) }}" style="display:inline;" onsubmit="return confirm('√ätes-vous s√ªr de vouloir supprimer ce post ?');">
                                                    <input type="hidden" name="_method" value="DELETE">
                                                    <button class="btn-danger btn-sm toggle-important" type="submit">üóëÔ∏è Retirer</button>
                                                </form>
                                            {% endif %}
                                        </td>
                                    {% endif %}
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                {% else %}
                    <p>Aucun post pour le moment.</p>
                {% endif %}
            </div>
        </div>



        <!-- Membres de l'UE -->
        <div class="card mb-4" style="background-color: #64b5f6; color: #fff;">
            <div class="card-header d-flex justify-content-between align-items-center" style="background: transparent; border-bottom: none;">
                <h2 style="font-family: 'Luckiest Guy', cursive;">Membres de l'UE</h2>
                <div class="d-flex align-items-center">
                    <label for="filterRole" class="me-2">Filtrer :</label>
                    <select id="filterRole" class="form-select" style="width: auto; min-width: 150px;">
                        <option value="Tous" selected>Tous</option>
                        <option value="Professeur">Professeurs</option>
                        <option value="√âtudiant">√âtudiants</option>
                    </select>
                </div>
            </div>
            <div class="card-body">
                {% if course.users|length > 0 %}
                    <div class="table-responsive">
                        <table id="membersTable" class="table table-borderless text-white" style="background-color: #39acff; border-radius: 15px; overflow: hidden;">
                            <thead style="background-color: #ffffff; color: #000;">
                            <tr class="text-center">
                                <th style="padding: 1rem;">Nom</th>
                                <th style="padding: 1rem;">Pr√©nom</th>
                                <th style="padding: 1rem;">Email</th>
                                <th style="padding: 1rem;">R√¥le</th>
                            </tr>
                            </thead>
                            <tbody id="membersBody">
                            {% for user in course.users %}
                                <tr class="text-center">
                                    <td style="padding: 1rem;">{{ user.lastName }}</td>
                                    <td style="padding: 1rem;">{{ user.firstName }}</td>
                                    <td style="padding: 1rem;">{{ user.email }}</td>
                                    <td style="padding: 1rem;">
                                        {% if 'ROLE_PROFESSEUR' in user.roles %}
                                            Professeur
                                        {% elseif 'ROLE_ETUDIANT' in user.roles %}
                                            √âtudiant
                                        {% else %}
                                            Autre
                                        {% endif %}
                                    </td>
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                {% else %}
                    <p>Aucun membre enregistr√© pour cette UE.</p>
                {% endif %}
            </div>
        </div>



        <!-- Modal Cr√©er un post -->
        <div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content" style="background-color: #f0f0f0;">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createPostModalLabel">Cr√©er un post</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                    </div>
                    <div class="modal-body">
                        <form id="postForm">
                            <div class="mb-3">
                                <label for="postTitle" class="form-label">Titre du post</label>
                                <input type="text" class="form-control" id="postTitle" placeholder="Titre du post">
                            </div>
                            <div class="mb-3" id="descriptionTextGroup">
                                <label for="postText" class="form-label">Texte du post</label>
                                <textarea class="form-control" id="postText" rows="3" placeholder="Entrez votre texte"></textarea>
                            </div>

                            <div class="mb-3 d-none" id="descriptionLinkGroup">
                                <label for="postLink" class="form-label">Lien URL</label>
                                <input type="url" class="form-control" id="postLink" placeholder="https://exemple.com">
                            </div>

                            <div class="mb-3 d-none" id="descriptionFileGroup">
                                <label for="postFile" class="form-label">Fichier</label>
                                <input type="file" class="form-control" id="postFile">
                            </div>
                            <div class="mb-3">
                                <label for="contentType" class="form-label">Type</label>
                                <select class="form-select" id="contentType">
                                    <option value="text" selected>Texte</option>
                                    <option value="link">Lien</option>
                                    <option value="document">Document</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="isImportant" class="form-label">Important ?</label>
                                <select class="form-select" id="isImportant">
                                    <option value="0" selected>Non</option>
                                    <option value="1">Oui</option>
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="button" class="btn btn-primary" id="submitPost">Poster</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
{% endblock %}

{% block javascripts %}
    <script>
        // === URL d'envoi pour la cr√©ation de post (inject√©e via Twig) ===
        const createPostUrl = "{{ path('course_create_post', {'id': course.id}) }}";

        // === Cr√©ation d'un post depuis la modale ===
        document.addEventListener('DOMContentLoaded', () => {
            const submitButton = document.getElementById('submitPost');

            if (submitButton) {
                submitButton.addEventListener('click', async () => {
                    const title = document.getElementById('postTitle').value.trim();
                    const type = document.getElementById('contentType').value;
                    const isImportant = document.getElementById('isImportant').value;

                    let description = '';

                    // R√©cup√©ration du champ de description en fonction du type
                    if (type === 'text') {
                        description = document.getElementById('postText').value.trim();
                    } else if (type === 'link') {
                        description = document.getElementById('postLink').value.trim();
                    } else if (type === 'document') {
                        const fileInput = document.getElementById('postFile');
                        if (fileInput.files.length > 0) {
                            const file = fileInput.files[0];
                            description = file.name; // Juste le nom, le fichier n'est pas upload√© ici
                        } else {
                            alert('Merci de s√©lectionner un fichier.');
                            return;
                        }
                    }

                    // V√©rifie que tous les champs sont remplis
                    if (!title || !description) {
                        alert('Merci de remplir tous les champs.');
                        return;
                    }

                    // Envoi AJAX vers le backend pour cr√©er le post
                    try {
                        const response = await fetch(createPostUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({
                                title,
                                description,
                                type,
                                is_important: isImportant
                            })
                        });

                        const result = await response.json();

                        if (response.ok && result.status === 'success') {
                            alert('Post cr√©√© avec succ√®s.');
                            document.getElementById('postForm').reset();
                            bootstrap.Modal.getInstance(document.getElementById('createPostModal')).hide();
                            location.reload();
                        } else {
                            alert('Erreur serveur : ' + (result.message || 'Erreur inconnue.'));
                        }
                    } catch (error) {
                        console.error('Erreur communication:', error);
                        alert('Erreur de communication avec le serveur.');
                    }
                });
            }
        });

        // === Filtrage des membres de l'UE par r√¥le ===
        document.addEventListener('DOMContentLoaded', () => {
            const filterRole = document.getElementById('filterRole');
            const membersBody = document.getElementById('membersBody');

            // Construction d'un tableau JS des membres via Twig
            const members = [
                {% for user in course.users %}
                {
                    lastName: "{{ user.lastName|e('js') }}",
                    firstName: "{{ user.firstName|e('js') }}",
                    email: "{{ user.email|e('js') }}",
                    role: "{{ user.role|e('js') }}"
                },
                {% endfor %}
            ];

            // Convertit un r√¥le en nom lisible
            function formatRole(role) {
                if (role.includes('PROF')) {
                    return 'Professeur';
                } else if (role.includes('ELEVE')) {
                    return '√âl√®ve';
                } else {
                    return 'Autre';
                }
            }

            // Affiche la liste des membres filtr√©s
            function renderMembers(filter) {
                membersBody.innerHTML = '';

                const filtered = members.filter(member => {
                    if (filter === 'Tous') return true;
                    if (filter === 'Professeur') return member.role.includes('PROF');
                    if (filter === '√âtudiant') return member.role.includes('ELEVE');
                    return true;
                });

                if (filtered.length === 0) {
                    const row = document.createElement('tr');
                    row.innerHTML = `<td colspan="4" class="text-center p-4">Aucun membre trouv√©</td>`;
                    membersBody.appendChild(row);
                    return;
                }

                // Ajoute les lignes HTML correspondantes
                filtered.forEach(member => {
                    const row = document.createElement('tr');
                    row.className = "text-center";
                    row.innerHTML = `
                        <td style="padding: 1rem;">${member.lastName}</td>
                        <td style="padding: 1rem;">${member.firstName}</td>
                        <td style="padding: 1rem;">${member.email}</td>
                        <td style="padding: 1rem;">${formatRole(member.role)}</td>
                    `;
                    membersBody.appendChild(row);
                });
            }

            // Initialise la vue avec "Tous"
            filterRole.value = 'Tous';
            renderMembers('Tous');

            // R√©agit au changement de filtre
            filterRole.addEventListener('change', (e) => {
                renderMembers(e.target.value);
            });
        });

        // === Boutons "√©pingler / d√©s√©pingler" un post ===
        document.addEventListener('DOMContentLoaded', () => {
            const toggleButtons = document.querySelectorAll('.toggle-important');
            toggleButtons.forEach(button => {
                button.addEventListener('click', async () => {
                    const toggleUrl = button.getAttribute('data-toggle-url');

                    try {
                        const response = await fetch(toggleUrl, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.status === 'success') {
                            if (result.isImportant) {
                                button.classList.remove('btn-success');
                                button.classList.add('btn-danger');
                                button.innerHTML = 'des√©pingler';
                            } else {
                                button.classList.remove('btn-danger');
                                button.classList.add('btn-success');
                                button.innerHTML = '√©pingler';
                            }
                        } else {
                            alert('Erreur serveur: ' + (result.message || 'Erreur inconnue.'));
                        }
                    } catch (error) {
                        console.error('Erreur communication:', error);
                    }
                });
            });
        });

        // === URL pour cr√©ation de contenu (document ou ressource) ===
        const createContentUrl = "{{ path('course_create_content', {'id': course.id}) }}";

        // === Cr√©ation de contenu dans l'UE ===
        document.addEventListener('DOMContentLoaded', () => {
            const submitContentButton = document.getElementById('submitContent');
            submitContentButton.addEventListener('click', async () => {
                const name = document.getElementById('contentName').value.trim();
                const type = document.getElementById('contentTypeSelect').value;

                if (!name || !type) {
                    alert('Merci de remplir tous les champs obligatoires.');
                    return;
                }

                const formData = new FormData();
                formData.append('name', name);
                formData.append('type', type);

                // Selon le type, on ajoute un lien ou un fichier
                if (type === 'ressource') {
                    const media = document.getElementById('contentMedia').value.trim();
                    formData.append('media', media);
                } else if (type === 'document') {
                    const fileInput = document.getElementById('contentFile');
                    formData.append('file', fileInput.files[0]);
                }

                // Envoi AJAX au backend
                const response = await fetch(createContentUrl, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });

                const result = await response.json();
                if (response.ok && result.status === 'success') {
                    alert('Contenu ajout√© avec succ√®s.');
                    document.getElementById('contentForm').reset();
                    bootstrap.Modal.getInstance(document.getElementById('createContentModal')).hide();
                    location.reload();
                } else {
                    alert('Erreur serveur: ' + (result.message || 'Erreur inconnue.'));
                }
            });
        });

        // === Affichage conditionnel des champs "document" ou "ressource" ===
        document.addEventListener('DOMContentLoaded', () => {
            const typeSelect = document.getElementById('contentTypeSelect');
            const linkGroup = document.getElementById('contentLinkGroup');
            const fileGroup = document.getElementById('contentFileGroup');

            // Affiche/masque les bons champs selon le type s√©lectionn√©
            function updateFieldsVisibility() {
                const selectedType = typeSelect.value;

                if (selectedType === 'document') {
                    linkGroup.classList.add('d-none');
                    fileGroup.classList.remove('d-none');
                } else if (selectedType === 'ressource') {
                    fileGroup.classList.add('d-none');
                    linkGroup.classList.remove('d-none');
                }
            }

            // Met √† jour les champs au chargement et lors des changements
            typeSelect.addEventListener('change', updateFieldsVisibility);
            updateFieldsVisibility(); // Initialisation
        });
    </script>
{% endblock %}

